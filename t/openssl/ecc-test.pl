use strict;
use warnings;
use File::Glob 'bsd_glob';

sub runcmds {
  my ($curve, $cmds) = @_;
  for (split /\n/, $cmds) {
    s/^\s*(.*?)\s*$/$1/;
    warn "##$curve## >$_<\n";
    my $rv = system($_);
    die "ERROR (curve = $curve, rv = $rv)\n" if $rv;
  }
}

sub doit {
  my $curve = shift;
  ### sign openssl > cryptx
  runcmds $curve, <<'MARKER';
    openssl dgst -sha1 -sign test_eckey.priv.pem -out test_input.sha1-ec.sig test_input.data
MARKER

  {
   use Crypt::PK::ECC;
   use Crypt::Digest 'digest_file';
   use File::Slurp 'read_file';

   my $pkec = Crypt::PK::ECC->new("test_eckey.pub.pem");
   my $signature = read_file("test_input.sha1-ec.sig", binmode=>':raw');
   my $valid = $pkec->verify_hash($signature, digest_file("SHA1", "test_input.data"), "SHA1", "v1.5");
   print $valid ? "SUCCESS" : "FAILURE";
  }

  ### sign cryptx > openssl
  {
   use Crypt::PK::ECC;
   use Crypt::Digest 'digest_file';
   use File::Slurp 'write_file';

   my $pkec = Crypt::PK::ECC->new("test_eckey.priv.pem");
   my $signature = $pkec->sign_hash(digest_file("SHA1", "test_input.data"), "SHA1", "v1.5");
   write_file("test_input.sha1-ec.sig", {binmode=>':raw'}, $signature);
  }

  runcmds $curve, <<'MARKER';
   openssl dgst -sha1 -verify test_eckey.pub.pem -signature test_input.sha1-ec.sig test_input.data
MARKER
}

### MAIN ###

my $curve;
write_file("test_input.data", "test-file-content");

for $curve (qw/brainpoolp160r1 brainpoolp192r1 brainpoolp224r1 brainpoolp256r1 brainpoolp320r1 brainpoolp384r1 brainpoolp512r1
               secp112r1 secp112r2 secp128r1 secp128r2 secp160k1 secp160r1 secp160r2 secp192k1
               secp192r1 secp224k1 secp224r1 secp256k1 secp256r1 secp384r1 secp521r1
               prime192v1 prime192v2 prime192v3 prime239v1 prime239v2 prime239v3 prime256v1
               nistp192 nistp224 nistp256 nistp384 nistp521/) {
  ### keys generated by cryptx
  {
   use Crypt::PK::ECC;
   use File::Slurp 'write_file';

   my $pkec = Crypt::PK::ECC->new;
   $pkec->generate_key($curve);
   write_file("test_eckey.pub.der",  {binmode=>':raw'}, $pkec->export_key_der('public'));
   write_file("test_eckey.priv.der", {binmode=>':raw'}, $pkec->export_key_der('private'));
   write_file("test_eckey.pub.pem",  $pkec->export_key_pem('public'));
   write_file("test_eckey.priv.pem", $pkec->export_key_pem('private'));
   write_file("test_eckey-passwd.priv.pem", $pkec->export_key_pem('private', 'secret'));
   #short
   write_file("test_eckey.pubs.der",  {binmode=>':raw'}, $pkec->export_key_der('public_short'));
   write_file("test_eckey.privs.der", {binmode=>':raw'}, $pkec->export_key_der('private_short'));
   write_file("test_eckey.pubs.pem",  $pkec->export_key_pem('public_short'));
   write_file("test_eckey.privs.pem", $pkec->export_key_pem('private_short'));
   write_file("test_eckey-passwd.privs.pem", $pkec->export_key_pem('private_short', 'secret'));
  }

  runcmds "$curve/A", <<'MARKER';
   openssl ec -in test_eckey.priv.der -text -inform der
   openssl ec -in test_eckey.priv.pem -text
   openssl ec -in test_eckey-passwd.priv.pem -text -inform pem -passin pass:secret
   openssl ec -in test_eckey.pub.der -pubin -text -inform der
   openssl ec -in test_eckey.pub.pem -pubin -text
   openssl ec -in test_eckey.privs.der -text -inform der
   openssl ec -in test_eckey.privs.pem -text
   openssl ec -in test_eckey-passwd.privs.pem -text -inform pem -passin pass:secret
   openssl ec -in test_eckey.pubs.der -pubin -text -inform der
   openssl ec -in test_eckey.pubs.pem -pubin -text
MARKER

  doit("$curve/A");
}

# openssl ecparam -list_curves
for my $curve (qw/secp112r1 secp112r2 secp128r1 secp128r2 secp160k1 secp160r1 secp160r2 secp192k1
                  secp224k1 secp224r1 secp256k1 secp384r1 secp521r1
                  prime192v1 prime192v2 prime192v3 prime239v1 prime239v2 prime239v3 prime256v1
                  brainpoolP160r1 brainpoolP160t1 brainpoolP192r1 brainpoolP192t1 brainpoolP224r1
                  brainpoolP224t1 brainpoolP256r1 brainpoolP256t1 brainpoolP320r1 brainpoolP320t1
                  brainpoolP384r1 brainpoolP384t1 brainpoolP512r1 brainpoolP512t1/) {
  ### keys generated by openssl
  runcmds "$curve/B", <<"MARKER";
   openssl ecparam -param_enc explicit -name $curve -genkey -out test_eckey.priv.pem
   openssl ec -param_enc explicit -in test_eckey.priv.pem -out test_eckey.pub.pem -pubout
   openssl ec -param_enc explicit -in test_eckey.priv.pem -out test_eckey.priv.der -outform der
   openssl ec -param_enc explicit -in test_eckey.priv.pem -out test_eckey.pub.der -outform der -pubout
   openssl ec -param_enc explicit -in test_eckey.priv.pem -out test_eckey.privc.der -outform der -conv_form compressed
   openssl ec -param_enc explicit -in test_eckey.priv.pem -out test_eckey.pubc.der -outform der -pubout -conv_form compressed
   openssl ec -param_enc explicit -in test_eckey.priv.pem -passout pass:secret -des3 -out test_eckey-passwd.priv.pem
MARKER

  {
   use Crypt::PK::ECC;
   use File::Slurp 'write_file';

   my $pkec = Crypt::PK::ECC->new;
   $pkec->import_key("test_eckey.pub.der");
   $pkec->import_key("test_eckey.pubc.der");
   $pkec->import_key("test_eckey.priv.der");
   $pkec->import_key("test_eckey.privc.der");
   $pkec->import_key("test_eckey.pub.pem");
   $pkec->import_key("test_eckey.priv.pem");
   $pkec->import_key("test_eckey-passwd.priv.pem", "secret");
  }

  doit("$curve/B");
}

warn "\nSUCCESS\n";
unlink $_ for (bsd_glob("test_*.der"), bsd_glob("test_*.pem"), bsd_glob("test_*.sig"), bsd_glob("test_*.data"));