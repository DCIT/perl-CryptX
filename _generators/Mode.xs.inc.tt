MODULE = CryptX         PACKAGE = Crypt::Mode::[%orig_name%]

[%comment%]

Crypt::Mode::[%orig_name%]
[%-IF lc_name == 'ctr' %]
_new(char * cipher_name, int ctr_mode=0, int ctr_width=0, int rounds=0)
[%-ELSE%]
_new(char * cipher_name, int rounds=0)
[%-END%]
    CODE:
    {
        Newz(0, RETVAL, 1, struct [%lc_name%]_struct);
        if (!RETVAL) croak("FATAL: Newz failed");
        RETVAL->direction = 0;
        RETVAL->cipher_rounds = rounds;
        RETVAL->cipher_id = find_cipher(cipher_name);
        if(RETVAL->cipher_id==-1) croak("FATAL: find_cipfer failed for '%s'", cipher_name);
[%-IF lc_name == 'ctr' %]
        if (ctr_mode == 0) RETVAL->ctr_mode_param = CTR_COUNTER_LITTLE_ENDIAN;
        if (ctr_mode == 1) RETVAL->ctr_mode_param = CTR_COUNTER_BIG_ENDIAN;
        if (ctr_mode == 2) RETVAL->ctr_mode_param = CTR_COUNTER_LITTLE_ENDIAN|LTC_CTR_RFC3686;
        if (ctr_mode == 3) RETVAL->ctr_mode_param = CTR_COUNTER_BIG_ENDIAN|LTC_CTR_RFC3686;
        if (ctr_width > 0 && ctr_width <= cipher_descriptor[RETVAL->cipher_id].block_length) RETVAL->ctr_mode_param |= ctr_width;
[%-END%]
    }
    OUTPUT:
        RETVAL

void
DESTROY(Crypt::Mode::[%orig_name%] self)
    CODE:
        Safefree(self);

int
_get_dir(Crypt::Mode::[%orig_name%] self)
    CODE:
        RETVAL = self->direction;
    OUTPUT:
        RETVAL

void
[%-IF lc_name == 'xts' %]
_start(_XXX_XXX_XXX_)
[%-ELSIF lc_name == 'f8' %]
_start(_XXX_XXX_XXX_)
[%-ELSIF lc_name == 'lrw' %]
_start(_XXX_XXX_XXX_)
[%-ELSE%]
_start(Crypt::Mode::[%orig_name%] self, int dir, SV * key, SV * iv)
[%-END%]
    CODE:
    {
        STRLEN k_len=0;
        unsigned char *k=NULL;
        STRLEN i_len=0;
        unsigned char *i=NULL;
        int rv;

        if (!SvPOK(key))   croak("FATAL: key must be string/buffer scalar");
        k = (unsigned char *) SvPVbyte(key, k_len);

        if (!SvPOK(iv))    croak("FATAL: iv must be string/buffer scalar");
        i = (unsigned char *) SvPVbyte(iv, i_len);
        if (i_len != (STRLEN)cipher_descriptor[self->cipher_id].block_length) {
          croak ("FATAL: sizeof(iv) should be equal to blocksize (%d)", cipher_descriptor[self->cipher_id].block_length);
        }

[%-IF lc_name == 'ctr' %]
        rv = [%lc_name%]_start(self->cipher_id, i, k, k_len, self->cipher_rounds, self->ctr_mode_param, &self->state);
[%-ELSIF lc_name == 'xts' %]
        rv = _XXX_XXX_XXX_;
[%-ELSIF lc_name == 'f8' %]
        rv = _XXX_XXX_XXX_;
[%-ELSIF lc_name == 'lrw' %]
        rv = _XXX_XXX_XXX_;
[%-ELSE%]
        rv = [%lc_name%]_start(self->cipher_id, i, k, k_len, self->cipher_rounds, &self->state);
[%-END%]
        if (rv != CRYPT_OK) {
          croak("FATAL: [%lc_name%]_start failed: %s", error_to_string(rv));
        }

        self->direction = dir;
    }

SV *
_crypt(Crypt::Mode::[%orig_name%] self, SV * data)
    CODE:
    {
        int rv;
        STRLEN in_data_len;
        unsigned char *in_data, *out_data;

        in_data = (unsigned char *)SvPVbyte(data, in_data_len);
        if (in_data_len==0) {
          RETVAL = newSVpvn("", 0);
        }
        else {
          RETVAL = NEWSV(0, in_data_len);
          SvPOK_only(RETVAL);
          SvCUR_set(RETVAL, in_data_len);
          out_data = (unsigned char *)SvPV_nolen(RETVAL);

          if (self->direction == 1) {
            rv = [%lc_name%]_encrypt(in_data, out_data, in_data_len, &self->state);
            if (rv != CRYPT_OK) croak("FATAL: [%lc_name%]_encrypt failed: %s", error_to_string(rv));
          }
          else if (self->direction == -1) {
            rv = [%lc_name%]_decrypt(in_data, out_data, in_data_len, &self->state);
            if (rv != CRYPT_OK) croak("FATAL: [%lc_name%]_decrypt failed: %s", error_to_string(rv));
          }
          else {
            croak("FATAL: [%lc_name%]_crypt failed: call start() first");
          }
        }
    }
    OUTPUT:
        RETVAL

SV *
_finish(Crypt::Mode::[%orig_name%] self)
    CODE:
          self->direction = 0;
          RETVAL = newSVpvn("", 0);
    OUTPUT:
        RETVAL
