package Crypt::Cipher::[%orig_name%];

[%comment%]

use strict;
use warnings;
our $VERSION = '0.001';

use CryptX;
use base 'Crypt::Cipher';

sub blocksize      { Crypt::Cipher::blocksize(__PACKAGE__) }
sub keysize        { Crypt::Cipher::keysize(__PACKAGE__) }
sub max_keysize    { Crypt::Cipher::max_keysize(__PACKAGE__) }
sub min_keysize    { Crypt::Cipher::min_keysize(__PACKAGE__) }
sub default_rounds { Crypt::Cipher::default_rounds(__PACKAGE__) }

1;

=pod

=head1 NAME

Crypt::Cipher::[%orig_name%] - [%info%]

=head1 SYNOPSIS

  ### example 1
  use Crypt::Mode::CBC;

  my $key = '...'; # length has to be valid key size for this cipher
  my $iv = '...';  # 16 bytes
  my $cbc = Crypt::Mode::CBC->new('[%orig_name%]');
  my $ciphertext = $cbc->encrypt("secret data", $key, $iv);

  ### example 2
  use Crypt::CBC;
  use Crypt::Cipher::[%orig_name%];

  my $key = '...'; # length has to be valid key size for this cipher
  my $iv = '...';  # 16 bytes
  my $cbc = Crypt::CBC->new( -cipher=>'Cipher::[%orig_name%]', -key=>$key, -iv=>$iv );
  my $ciphertext = $cbc->encrypt("secret data");

=head1 DESCRIPTION

This module implements the [%orig_name%] cipher. Provided interface is compliant with L<Crypt::CBC|Crypt::CBC> module.

B<BEWARE:> This module implements just elementary "one-block-(en|de)cryption" operation - if you want to
encrypt/decrypt generic data you have to use some of the cipher block modes - check for example
L<Crypt::Mode::CBC|Crypt::Mode::CBC>, L<Crypt::Mode::CTR|Crypt::Mode::CTR> or L<Crypt::CBC|Crypt::CBC> (which will be slower).

=head1 METHODS

=head2 new

 $c = Crypt::Cipher::[%orig_name%]->new($key);
 #or
 $c = Crypt::Cipher::[%orig_name%]->new($key, $rounds);

=head2 encrypt

 $ciphertext = $c->encrypt($plaintext);

=head2 decrypt

 $plaintext = $c->decrypt($ciphertext);

=head2 keysize

  $c->keysize;
  #or
  Crypt::Cipher::[%orig_name%]->keysize;
  #or
  Crypt::Cipher::[%orig_name%]::keysize;

=head2 blocksize

  $c->blocksize;
  #or
  Crypt::Cipher::[%orig_name%]->blocksize;
  #or
  Crypt::Cipher::[%orig_name%]::blocksize;

=head2 max_keysize

  $c->max_keysize;
  #or
  Crypt::Cipher::[%orig_name%]->max_keysize;
  #or
  Crypt::Cipher::[%orig_name%]::max_keysize;

=head2 min_keysize

  $c->min_keysize;
  #or
  Crypt::Cipher::[%orig_name%]->min_keysize;
  #or
  Crypt::Cipher::[%orig_name%]::min_keysize;

=head2 default_rounds

  $c->default_rounds;
  #or
  Crypt::Cipher::[%orig_name%]->default_rounds;
  #or
  Crypt::Cipher::[%orig_name%]::default_rounds;

=head1 SEE ALSO

=over

=item * L<CryptX|CryptX>, L<Crypt::Cipher|Crypt::Cipher>
[% FOREACH v IN urls %]
=item * L<[%v%]|[%v%]>
[% END %]
=back

=cut

__END__